{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 基于Windows平台的FastCgi通用网关接口的控制程序 使Win平台上的可执行程序（.exe）可以方便地通过FastCgi进行前后端交互，而无需启动一个新的Socket来进行处理。 MengCgi的运行依赖Nginx和FastCgi环境。不同于解析语言PHP等，MengCgi的运行需要Spawn-fcgi映射端口以实现与FastCgi的通讯。 由于MengCgi本身相当于一个Worker，只是起到一个桥梁的作用，所以MengCgi的配置与使用相当简单。 注意：MengCgi的运行依赖易语言支持库文件。 "},"chapter1/readme.html":{"url":"chapter1/readme.html","title":"概述","keywords":"","body":"MengCgi不单独提供Web服务，依赖于Nginx + FastCgi环境。 需要在安装之前先配置Web服务端环境 文档中使用Wnmp环境直接安装 暂不支持其他环境 "},"chapter1/wnmp_init.html":{"url":"chapter1/wnmp_init.html","title":"Wnmp安装","keywords":"","body":"Wnmp是Windows平台下的一个Web服务端面板。 请到官网下载最新版本 传送门 直接安装到服务器即可 "},"chapter1/fcgi.html":{"url":"chapter1/fcgi.html","title":"FastCgi映射","keywords":"","body":"由于MengCgi不像·PHP自带PHP-fpm，所以需要使用spawn-fcgi映射端口 spawn-fcgi一般是在Linux上使用，在Windows平台使用VS编译会报错，所以这里免费提供编译好的x86程序 链接：https://pan.baidu.com/s/1jR44y8xkOAXHd80JjslDng 提取码：q7ly 下载spawn-fcgi.exe程序，放到Wnmp根目录下 环境变量配置 把你的Wnmp安装目录添加到系统环境变量Path中 例如安装目录为 C:\\Wnmp Nginx配置 这里映射的端口选择 8081 location ~ \\.mxl$ { fastcgi_pass 127.0.0.1:8081; fastcgi_index index.mxl; include fastcgi.conf; } 把上面这段配置添加到nginx.conf的Server字段 "},"chapter2/init.html":{"url":"chapter2/init.html","title":"安装","keywords":"","body":"先在Release节中下载MengCgi可执行文件 得到mengcgi.exe，在wnmp根目录下新建cgi-bin目录，放入mengcgi.exe 在cgi-bin目录内新建conf目录，存储mengcgi配置文件 主配置文件 [config] wwwroot=E:\\wwwroot 参数解释 参数名称 作用解释 示例 config.wwwroot http服务根目录 E:\\wwwroot 把以上内容写入config.ini，放入conf目录 "},"chapter2/start.html":{"url":"chapter2/start.html","title":"启动","keywords":"","body":"使用spawn-fcgi启动mengcgi处理程序 spawn-fcgi -f ./cgi-bin/echo-cpp.exe -a 127.0.0.1 -p 8081 启动Nginx，mengcgi主程序的安装与启动过程完成 "},"chapter3/child_profile.html":{"url":"chapter3/child_profile.html","title":"子配置","keywords":"","body":"子配置文件 子配置文件放置于wwwroot目录内，每个文件对应一个Mengcgi - Worker程序。例如文件位于/wwwroot/eg.xml，浏览器访问 http://example.com/eg.xml 时MengCgi会通过读取eg.xml中的参数运行 Worker 程序来实现交互。 \\cgi-bin\\test.exe false 参数名称 作用解释 示例 config.worker 处理程序路径 \\cgi-bin\\test.exe config.serverVar MengCgi传入处理程序的FastCgi服务器变量，以半角逗号分割 暂无 config.serverTokens 是否在 X-Powered-by 显示MengCgi标识 true 示例 "},"chapter3/worker.html":{"url":"chapter3/worker.html","title":"Worker开发","keywords":"","body":"环境变量 URL = 返回服务器地址PATHINFO = 客户端提供的路径信息APPL_PHYSICAL_PATH = 与应用程序元数据库路径相应的物理路径PATH_TRANSLATED = 通过由虚拟至物理的映射后得到的路径SCRIPT_NAME = 执行脚本的名称QUERY_STRING = 查询字符串內容HTTP_REFERER = 请求的字符串內容SERVER_PORT = 接受请求的服务器端口号REMOTE_ADDR = 发出请求的远程主机的IP地址REMOTE_HOST = 发出请求的远程主机名称LOCAL_ADDR = 返回接受请求的服务器地址HTTP_HOST = 返回服务器地址SERVER_NAME = 服务器的主机名、DNS地址或IP地址REQUEST_METHOD = 提出请求的方法比如GET、HEAD、POST等等SERVER_PORT_SECURE = 如果接受请求的服务器端口为安全端口时，则为1，否则为0SERVER_PROTOCOL = 服务器使用的协议的名称和版本SERVER_SOFTWARE = 应答请求并运行网关的服务器软件的名称和版本ALL_HTTP = 客户端发送的所有HTTP标头，前缀HTTPALLRAW = 客户端发送的所有HTTP标头,其结果和客户端发送时一样，没有前缀HTTPAPPL_MD_PATH = 应用程序的元数据库路径CONTENT_LENGTH = 客户端发出內容的长度HTTPS = 如果请求穿过安全通道（SSL），则返回ON如果请求来自非安全通道，则返回OFFINSTANCE_ID = IIS实例的ID号INSTANCE_META_PATH = 响应请求的IIS实例的元数据库路径HTTP_ACCEPT_ENCODING = 返回內容如：GZIP,DEFLATEHTTP_ACCEPT_LANGUAGE = 返回內容如：EN-USHTTP_CONNECTION = 返回內容：KEEP-ALIVEHTTP_COOKIE = 返回内容：Cookie的值HTTP_USER_AGENT = 取出用户浏览器类型 返回內容：MOZILLA/4.0(COMPATIBLE;MSIE6.0;WINDOWSNT5.1;SV1)AUTH_PASSWORD = 当使用基本验证模式时，客户在密码对话框中输入的密码AUTH_TYPE = 是用户访问受保护的脚本时，服务器用於检验用户的验证方法AUTH_USER = 代证的用户名CONTENT_TYPE = 客户发送的FORM內容或HTTPPUT的数据类型。 请求头字段获取 例如请求头中有一个AuthToken字段，那么可以在子配置的serverVar中填入HTTP_AUTHTOKEN来获取。变量名字母必须大写， MengCgi用命令行方式启动Worker程序，参数如下 位置 解释 0 请求方式（GET/POST） 1 链接变量（Query String）的变量地址 2 链接变量长度 3 Post提交的数据的变量地址。默认为0 4 Post提交的数据长度.默认为0 5 Cookie数据变量地址 6 Cookie数据长度 7 要求的服务器变量变量地址 8 服务器变量Json长度 9 客户端IP（1.1.1.1） 10 MengCgi内部句柄，在处理完成后请传递给 Worker_Callback方法 11 MengCgi Pid 用于OpenProcess 12 Worker_Callback方法地址。用于远程Call GMT时间示例 Sun, 01 May 2022 13:38:56 GMT _Call参数解释 参数名称 用途解释 示例值 Proc_handle MengCgi进程句柄 100 addr Worker_Callback方法地址 / mcgi_output 返回的Document数据，需要事先在MengCgi进程中创建远程内存后传递内存地址整数 / mcgi_extradata Header、Cookies等数据，内存地址 / ExtraData示例 { \"headers\": [ { \"fieldname\": \"header_field1\", \"fieldvalue\": \"a1\" }, { \"fieldname\": \"header_field2\", \"fieldvalue\": \"b2\" } ], \"cookies\": [ { \"cookiename\": \"cexample\", \"value\": \"test\", \"expire\": \"Sun, 01 May 2022 13:38:56 GMT\", \"wwwpath\": \"/admin\", \"domain\": \"xyjerry.com\" } ], \"status\": \"200 OK\", \"thread_handle\": 12345 } 具体见 Demo 例程 请一定先充分理解Demo中的每一行代码的意义，再进行开发。否则可能造成内存溢出，程序崩溃等后果 "},"chapter3/pro_config.html":{"url":"chapter3/pro_config.html","title":"进阶配置","keywords":"","body":"程序限频 只适配于HTTP协议 在Nginx.conf的HTTP节中Server节外添加如下语句 limit_req_zone $remote_addr*$arg_imei zone=zone_imei:10m rate=2r/s; rate为限频规则，2r/s为每秒允许两次请求 30r/m代表每分钟三十次请求 在MengCgi的location节中添加如下语句 limit_req zone=zone_imei burst=1; 作用 限制请求频率对MengCgi非常重要，如果短时间内出现大量请求，可能导致CPU爆满。限频可以在一定程度上阻止上述现象的发生 MengCgi已经优化自身对内存的管理，可以基本做到资源的有效利用和释放，不过这也取决于Worker程序的写法。 "},"chapter4/release.html":{"url":"chapter4/release.html","title":"Release","keywords":"","body":"2022/7/20 更新 v1.2 更新内容： 1.修复一些小问题 链接：https://pan.baidu.com/s/1__8DyRIKQbudgOClyr2btQ 提取码：w1z5 2022/5/2 更新 v1.0 链接：https://pan.baidu.com/s/1jDiOhPbAO2BKDPBSJyQEIg 提取码：59v8 感谢您对MengCgi的支持 "}}